{"version":3,"sources":["common/api.js","features/user/userSlice.js","components/Login.js","components/pages/Landing.js","components/layout/Navbar.js","components/layout/SideNavbar.js","features/content/contentSlice.js","components/dashboard/EditContent.js","components/dashboard/DeleteContent.js","components/dashboard/ContentItem.js","components/dashboard/Feed.js","components/dashboard/AddContent.js","components/pages/Dashboard.js","App.js","serviceWorker.js","app/reducers.js","store.js","index.js"],"names":["axios","defaults","baseURL","setAuthHeader","token","headers","common","authenticateUser","user","a","post","getUser","get","getAllContent","createContent","content","editContent","put","id","deleteContent","delete","login","createAsyncThunk","api","createSlice","name","initialState","isAuthenticated","authType","reducers","setUser","state","action","payload","data","localStorage","getItem","logout","removeItem","extraReducers","fulfilled","setItem","actions","Login","history","useHistory","dispatch","useDispatch","useSelector","useState","email","password","form","updateForm","onChangeHandler","e","target","value","useEffect","push","className","onSubmit","preventDefault","type","placeholder","onChange","Landing","Navbar","Nav","Link","as","to","onClick","SideNavbar","setView","active","setActive","activeKey","onSelect","eventKey","getContent","_","EditContent","props","show","closeHandler","updateContent","Modal","size","onHide","Header","Title","Body","Form","Group","controlId","Label","Control","title","rows","description","Footer","then","DeleteContent","ContentItem","showEdit","setShowEdit","showDelete","setShowDelete","Fragment","Feed","fetch","map","item","key","AddContent","Button","variant","Dashboard","view","setViewHandler","role","App","_token","res","catch","err","console","log","exact","path","component","Boolean","window","location","hostname","match","combineReducers","contentReducer","userReducer","middleware","thunk","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","rootReducer","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ae7fb1c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// API not working locally? This will be why\r\n// TODO: set using env vars instead (will still need to set localhost port)\r\naxios.defaults.baseURL = 'https://cportfolio.herokuapp.com';\r\n\r\nconst AUTH_USER = '/users/authenticate';\r\nconst CURRENT_USER = '/users/current';\r\nconst CONTENT = '/content/';\r\nconst CREATE_CONTENT = '/content/create';\r\n\r\n// Automatically attach current auth token to all API requests\r\nconst setAuthHeader = token => axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n\r\nconst authenticateUser = async user => await axios.post(AUTH_USER, user);\r\n\r\nconst getUser = async token => await axios.get(CURRENT_USER, token);\r\n\r\nconst getAllContent = async () => await axios.get(CONTENT);\r\n\r\nconst createContent = async content => await axios.post(CREATE_CONTENT, content);\r\n\r\nconst editContent = async content => await axios.put(`${CONTENT}${content.id}`, content);\r\n\r\nconst deleteContent = async id => await axios.delete(`${CONTENT}${id}`);\r\n\r\nexport default {\r\n  setAuthHeader,\r\n  authenticateUser,\r\n  getUser,\r\n  getAllContent,\r\n  createContent,\r\n  editContent,\r\n  deleteContent\r\n};\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport api from '../../common/api';\r\n\r\nexport const login = createAsyncThunk(\r\n  'user/authenticate',\r\n  api.authenticateUser\r\n);\r\n\r\nconst user = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    isAuthenticated: false,\r\n    authType: 'Bearer'\r\n  },\r\n  reducers: {\r\n    setUser: (state, action) => {\r\n      return {\r\n        ...state,\r\n        ...action.payload.data,\r\n        token: localStorage.getItem('token'),\r\n        isAuthenticated: true\r\n      }\r\n    },\r\n    logout: () => {\r\n\r\n      localStorage.removeItem('token');\r\n      api.setAuthHeader('');\r\n\r\n      return { isAuthenticated: false }\r\n    }\r\n  },\r\n  extraReducers: {\r\n    [login.fulfilled]: (state, action) => {\r\n\r\n      // Clear any existing token\r\n      localStorage.removeItem('token');\r\n\r\n      // Persist JWT to local storage\r\n      localStorage.setItem('token', action.payload.data.token);\r\n\r\n      // Tell axios to send auth token with every future request\r\n      api.setAuthHeader(action.payload.data.token);\r\n\r\n      return {\r\n        ...state,\r\n        ...action.payload.data,\r\n        isAuthenticated: true\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nexport const { logout, setUser } = user.actions;\r\n\r\nexport default user.reducer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { login } from '../features/user/userSlice';\r\n\r\nexport default function Login() {\r\n\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const isAuthenticated = useSelector(state => state.user.isAuthenticated);\r\n  const [form, updateForm] = useState({ email: '', password: '' });\r\n\r\n  const onSubmitHandler = e => {\r\n\r\n    e.preventDefault();\r\n\r\n    dispatch(login(form));\r\n  }\r\n\r\n  const onChangeHandler = e => updateForm({ ...form, [e.target.id]: e.target.value });\r\n\r\n  useEffect(() => { if (isAuthenticated) history.push('/dashboard') });\r\n\r\n        return(\r\n            <div className=\"form-box\">\r\n            <form className=\"login-form\" onSubmit={onSubmitHandler}>\r\n                <h2>Login</h2>\r\n                <hr/>\r\n                <div className=\"form-group\">\r\n                    <input type=\"email\" \r\n                           id=\"email\"\r\n                           placeholder=\"Email Address\" \r\n                           value={form.email}\r\n                           onChange={onChangeHandler}\r\n                           className=\"form-control\"\r\n                           />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input type=\"password\"  \r\n                           id=\"password\" \r\n                           placeholder=\"Password\" \r\n                           value={form.password}\r\n                           onChange={onChangeHandler}\r\n                           className=\"form-control\"\r\n                            />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-lg\">Login</button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n        );\r\n}\r\n","import React from 'react';\r\nimport Login from '../Login';\r\n\r\nconst Landing = () => {\r\n  return(\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row no-gutter\">\r\n        <div className=\"col-6 bg-info d-flex justify-content-center\">\r\n          <div className=\"splash-container\">\r\n            <h1 className=\"display-3 text-white\">cPortfolio</h1>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-6\">\r\n          <div className=\"splash-container\">\r\n            <Login/>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Landing;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { logout } from '../../features/user/userSlice';\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nexport default function Navbar() {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  return(\r\n    <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n      <Nav.Link as={Link} to=\"/dashboard\" className=\"navbar-brand col-sm-3 col-md-2 mr-0\">Dashboard</Nav.Link>\r\n      <ul className=\"navbar-nav px-3\">\r\n        <li className=\"nav-item text-nowrap\">\r\n          <Nav.Link as={Link} to=\"/\" onClick={() => dispatch(logout())}>Sign out</Nav.Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nexport default function SideNavbar({ setView }) {\r\n\r\n  const [active, setActive] = useState('dashboard');\r\n\r\n  const onSelectHandler = eventKey => {\r\n    setActive(eventKey);\r\n    setView(eventKey);\r\n  }\r\n\r\n  return(\r\n    <Nav className=\"col-md-2 d-none d-md-block bg-light sidebar\" activeKey={active} onSelect={onSelectHandler}>\r\n      <div className=\"sidebar-sticky\">\r\n        <ul className=\"nav flex-column\">\r\n          <li className=\"nav-item\">\r\n            <Nav.Link eventKey=\"dashboard\">\r\n              Dashboard\r\n            </Nav.Link>\r\n          </li>\r\n          <li className=\"nav-item\">\r\n            <Nav.Link eventKey=\"add-content\">\r\n              Add Content\r\n            </Nav.Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </Nav>\r\n  );\r\n}\r\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport api from '../../common/api';\r\n\r\nexport const getContent = createAsyncThunk(\r\n  'content/getContent',\r\n  api.getAllContent\r\n);\r\n\r\nexport const createContent = createAsyncThunk(\r\n  'content/createContent',\r\n  api.createContent\r\n);\r\n\r\nexport const editContent = createAsyncThunk(\r\n  'content/editContent',\r\n  api.editContent\r\n);\r\n\r\nexport const deleteContent = createAsyncThunk(\r\n  'content/deleteContent',\r\n  api.deleteContent\r\n);\r\n\r\nconst content = createSlice({\r\n  name: 'content',\r\n  initialState: [], // A list! Not an object\r\n  reducers: {},\r\n  extraReducers: {\r\n    'user/logout': () => { return [] }, // Make content reset itself when user logs out\r\n    [getContent.fulfilled]: (_, action) => { return [...action.payload.data] }\r\n  }\r\n});\r\n\r\nexport default content.reducer;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { editContent, getContent } from '../../features/content/contentSlice';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport default function EditContent(props) {\r\n\r\n  const { show, closeHandler } = props;\r\n  const [content, updateContent] = useState(props.content);\r\n  const dispatch = useDispatch();\r\n\r\n  const editClickHandler = () => {\r\n\r\n    // Wait until content is updated before dismissing the component\r\n    dispatch(editContent(content))\r\n      .then(() => dispatch(getContent()))\r\n      .then(() => closeHandler());\r\n  }\r\n\r\n  const onChangeHandler = e => updateContent({ ...content, [e.target.id]: e.target.value });\r\n\r\n  return(\r\n    <Modal size=\"lg\" show={show} onHide={closeHandler}>\r\n      <Modal.Header><Modal.Title>Edit Content</Modal.Title></Modal.Header>\r\n      <Modal.Body>\r\n        <Form>\r\n          <Form.Group controlId=\"title\">\r\n            <Form.Label>Title</Form.Label>\r\n            <Form.Control type=\"text\" value={content.title} onChange={onChangeHandler}/>\r\n          </Form.Group>\r\n          <Form.Group controlId=\"description\">\r\n            <Form.Label>Description</Form.Label>\r\n            <Form.Control as=\"textarea\" rows=\"5\" value={content.description} onChange={onChangeHandler}/>\r\n          </Form.Group>\r\n        </Form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <button className=\"btn btn-primary\" onClick={closeHandler}>Cancel</button>\r\n        <button className=\"btn btn-warning\" onClick={editClickHandler}>Save changes</button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { getContent, deleteContent } from '../../features/content/contentSlice';\r\n\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nexport default function DeleteContent({ content, show, closeHandler }) {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const deleteClickHandler = () => {\r\n\r\n    dispatch(deleteContent(content.id))\r\n      .then(() => dispatch(getContent()));\r\n      \r\n    closeHandler();\r\n  }\r\n\r\n  return(\r\n    <Modal show={show} onHide={closeHandler}>\r\n      <Modal.Header><Modal.Title>Delete Content</Modal.Title></Modal.Header>\r\n      <Modal.Body>Are you sure you want to delete '{content.title}'?</Modal.Body>\r\n      <Modal.Footer>\r\n        <button className=\"btn btn-primary\" onClick={closeHandler}>No, cancel</button>\r\n        <button className=\"btn btn-danger\" onClick={deleteClickHandler}>Yes, delete</button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nimport EditContent from './EditContent';\r\nimport DeleteContent from './DeleteContent';\r\n\r\nexport default function ContentItem({ content }) {\r\n\r\n  const [showEdit, setShowEdit] = useState(false);\r\n  const [showDelete, setShowDelete] = useState(false);\r\n\r\n  const handleEditClose = () => setShowEdit(false);\r\n  const handleDeleteClose = () => setShowDelete(false);\r\n\r\n  const { title, description } = content;\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <EditContent content={content} show={showEdit} closeHandler={handleEditClose}/>\r\n      <DeleteContent content={content} show={showDelete} closeHandler={handleDeleteClose}/>\r\n      <div className=\"row\">\r\n        <div className=\"flex-fill card mt-5 ml-5 mr-5\">\r\n          <div className=\"card-body\">\r\n            <h4 className=\"card-title\">{title}</h4>\r\n            <p className=\"card-text\">{description}</p>\r\n            <button className=\"btn btn-link float-right\" onClick={() => setShowEdit(true)}>Edit</button>\r\n            <button className=\"btn btn-link float-right text-danger\" onClick={() => setShowDelete(true)}>Delete</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { getContent } from '../../features/content/contentSlice';\r\n\r\nimport ContentItem from './ContentItem';\r\n\r\n/*\r\n * Component: Feed\r\n *\r\n * Contains the user's content in a feed/wall format.\r\n */\r\nexport default function Feed() {\r\n\r\n  // Redux hooks\r\n  const dispatch = useDispatch();\r\n  const content = useSelector(state => state.content);\r\n\r\n  // Reload content on state change\r\n  useEffect(() => {\r\n    async function fetch() { dispatch(getContent()) }\r\n    fetch();\r\n  }, []);\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <div className=\"flex-wrap pt-3 pb-2 mb-3\">\r\n        <div className=\"row\">\r\n          <h1 className=\"h2 ml-5 mt-5\">Your Content</h1>\r\n        </div>\r\n        {content.map(item => <ContentItem content={item} key={item.id}/>)}\r\n      </div>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport { createContent, getContent } from '../../features/content/contentSlice';\r\n\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function AddContent({ setView }) {  \r\n\r\n  const [content, updateContent] = useState({});\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmitHandler = e => {\r\n\r\n    e.preventDefault();\r\n\r\n    // Send API call, then re-fetch content and change dashboard view back to default\r\n    dispatch(createContent(content))\r\n      .then(() => dispatch(getContent()))\r\n      .then(() => setView('dashboard'));\r\n  }\r\n\r\n  const onChangeHandler = e => updateContent({ ...content, [e.target.id]: e.target.value });\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <h1 className=\"h2 ml-5 mt-5\">Add Content</h1>\r\n      <Form className=\"mt-5\" onSubmit={onSubmitHandler}>\r\n        <Form.Group controlId=\"title\">\r\n          <Form.Label>Title</Form.Label>\r\n          <Form.Control type=\"text\" value={content.title} onChange={onChangeHandler}/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"description\">\r\n          <Form.Label>Dscription</Form.Label>\r\n          <Form.Control as=\"textarea\" rows=\"5\" value={content.description} onChange={onChangeHandler}/>\r\n        </Form.Group>\r\n        <Button type=\"submit\" variant=\"info\">Create</Button>\r\n      </Form>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport Navbar from '../layout/Navbar';\r\nimport SideNavBar from '../layout/SideNavbar';\r\nimport Feed from '../dashboard/Feed';\r\nimport AddContent from '../dashboard/AddContent';\r\n\r\nexport default function Dashboard() {\r\n\r\n  const history = useHistory();\r\n  const [view, setView] = useState('dashboard');\r\n  const isAuthenticated = useSelector(state => state.user.isAuthenticated);\r\n\r\n  useEffect(() => { if (!isAuthenticated) history.push('/') });\r\n\r\n  const setViewHandler = eventKey => setView(eventKey);\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <Navbar/>\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <SideNavBar setView={setViewHandler}/>\r\n          <main role=\"main\" className=\"col-md-9 ml-sm-auto col-lg-10 px-4\">\r\n            {(view === 'dashboard') && <Feed/>}\r\n            {(view === 'add-content') && <AddContent setView={setViewHandler}/>}\r\n          </main>\r\n        </div>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport Landing from './components/pages/Landing';\r\nimport Dashboard from './components/pages/Dashboard';\r\n\r\nimport './App.css';\r\nimport api from './common/api';\r\nimport { setUser } from './features/user/userSlice';\r\n\r\nconst App = () => {\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n\r\n    // Check if user is already logged in\r\n    const _token = localStorage.getItem('token');\r\n\r\n    if (_token !== null) {\r\n\r\n      api.setAuthHeader(_token);\r\n\r\n      api.getUser()\r\n        .then(res => dispatch(setUser(res)))\r\n        .catch(err => console.log(err));\r\n    }\r\n  });\r\n\r\n  return(\r\n    <Router>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Landing}/>\r\n          <Route exact path=\"/dashboard\" component={Dashboard}/>\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport contentReducer from '../features/content/contentSlice';\r\nimport userReducer from '../features/user/userSlice';\r\n\r\nexport default combineReducers({\r\n  content: contentReducer,\r\n  user: userReducer\r\n});\r\n","/*\r\n * store.js\r\n * Boilerplate code. Redux store that controls application state.\r\n */\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './app/reducers';\r\n\r\nconst initialState = {};\r\n\r\n// Any middleware included goes here\r\nconst middleware = [thunk];\r\nconst middlewareEnhancer = applyMiddleware(...middleware);\r\n\r\n// Add enhancers (if any)\r\nconst enhancers = [middlewareEnhancer];\r\n\r\n// Give access to Redux Devtools\r\nconst composedEnhancers = composeWithDevTools(...enhancers);\r\n\r\nexport default createStore(rootReducer, initialState, composedEnhancers);\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}